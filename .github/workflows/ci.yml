name: PR Validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  pr-validation:
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Lint Code
        run: npm run lint

      - name: Run Unit Tests
        run: npm run test

      - name: Run Code Coverage
        run: npm run coverage

  # Build Job (Builds Docker Image, runs tests)
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx (for caching and optimized builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t msd-test-app:${{ github.sha }} .

      # Run tests inside Docker container
      - name: Run Docker Container to Test
        run: |
          docker run --rm msd-test-app:${{ github.sha }} npm test

      # Upload Docker Image as Artifact
      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: ./msd-test-app:${{ github.sha }}

  # Versioning Job (Handles versioning strategy for the app)
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get the current version
        run: |
          VERSION=$(git describe --tags --always)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Current Version: $VERSION"

      - name: Increment version for release (if applicable)
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "Skipping version bump"
          else
            echo "Bumping version"
            # Incrementing the patch version
            VERSION=$(npm version patch --no-git-tag-version)
            echo "New Version: $VERSION"
          fi

      - name: Tag the commit with new version
        run: |
          git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

  # PR Comment Job (Optional: to add checks and comments on PR)
  pr-comment:
    runs-on: ubuntu-latest
    needs: pr-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add PR comment on success
        run: |
          if [[ "${{ needs.pr-validation.result }}" == "success" ]]; then
            echo "PR validation successful! ðŸš€"
          else
            echo "PR validation failed. Please check the logs."
          fi

  # Docker Publish Job (Publish to DockerHub or any Docker registry)
  docker-publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' # Only run on main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to DockerHub
        run: |
          docker tag msd-test-app:${{ github.sha }} kapyuval/msd-test-app:${{ github.sha }}
          docker push kapyuval/msd-test-app:${{ github.sha }}
          docker push kapyuval/msd-test-app:latest

  # Deployment Job using ArgoCD
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: docker-publish
  #   if: github.ref == 'refs/heads/main' # Only deploy from main branch

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Deploy to production (example)
  #       run: |
  #         echo "Deploying version ${{ env.VERSION }} to production!"
  #         # Example: Replace this with your deploy command
  #         # kubectl apply -f deployment.yaml
