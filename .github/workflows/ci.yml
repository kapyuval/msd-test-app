name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  # PR Validation Job (Runs on PRs)
  pr-validation:
    needs: [build] # To make sure image is built properly as well
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: PR Validation
      # Optionally, ensure 'build' job runs first if needed
        uses: ./.github/actions/pr-validation

  # Build Job (Builds Docker Image, runs tests)
  build:
    uses: ./.github/workflows/setup-docker.yml
    with:
      docker-image-name: msd-test-app
      commit-sha: ${{ github.sha }}

  # Versioning Job (Handles versioning strategy for the app)
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up git config
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Get the current version
        run: |
          VERSION=$(git describe --tags --always)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Current Version: $VERSION"

      - name: Increment version for release (if applicable)
        id: set_version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Bumping version"
            # Incrementing the patch version
            VERSION=$(npm version patch --no-git-tag-version)
            echo "New Version: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "Skipping version bump"
          fi

      - name: Commit and tag updated version if version was changed
        if: github.ref == 'refs/heads/main'
        run: |
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ env.VERSION }}"
          git tag -a "${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
          git push && git push --tags

  # PR Comment Job (Optional: to add checks and comments on PR)
  pr-comment:
    runs-on: ubuntu-latest
    needs: pr-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add PR comment on success
        run: |
          if [[ "${{ needs.pr-validation.result }}" == "success" ]]; then
            echo "PR validation successful!"
          else
            echo "PR validation failed. Please check the logs."
          fi

  # Docker Publish Job (Publish to DockerHub)
  docker-publish:
    runs-on: ubuntu-latest
    needs: [pr-validation,versioning] # Don't proceed to publish if pr-validation or versioning failed
    if: github.ref == 'refs/heads/main' # Deploy only if it's the main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image tarball
        uses: actions/download-artifact@v4
        with:
          name: msd-test-app-image

      - name: Load Docker image
        run: |
          docker load -i msd-test-app.tar

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to DockerHub
        run: |
          docker tag msd-test-app:${{ github.sha }} kapyuval/msd-test-app:${{ github.sha }}
          docker tag msd-test-app:${{ github.sha }} kapyuval/msd-test-app:${{ needs.versioning.outputs.version }}
          docker tag msd-test-app:${{ github.sha }} kapyuval/msd-test-app:latest
          docker push kapyuval/msd-test-app:${{ github.sha }}
          docker push kapyuval/msd-test-app:${{ needs.versioning.outputs.version }}
          docker push kapyuval/msd-test-app:latest

  # Deployment Job using ArgoCD
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: docker-publish
  #   if: github.ref == 'refs/heads/main' # Only deploy from main branch

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Deploy to production (example)
  #       run: |
  #         echo "Deploying version ${{ env.VERSION }} to production!"
  #         # Example: Replace this with your deploy command
  #         # kubectl apply -f deployment.yaml
